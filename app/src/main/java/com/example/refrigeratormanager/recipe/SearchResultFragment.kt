package com.example.refrigeratormanager.recipe
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.GridLayoutManager
import com.example.refrigeratormanager.ApiClient
import com.example.refrigeratormanager.databinding.FragmentSearchResultBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class SearchResultFragment : Fragment() {

    private var _binding: FragmentSearchResultBinding? = null
    private val binding get() = _binding!!

    private lateinit var adapter: SearchResultAdapter
    private val recipeList = mutableListOf<Recipe>()

    private val recipeApi = ApiClient.getRecipeApi()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSearchResultBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // ‚úÖ RecyclerView ÏÑ§Ï†ï (Ïú†ÏßÄ)
        adapter = SearchResultAdapter(recipeList) { recipe ->
            if (recipe.url.isNullOrBlank()) {
                Toast.makeText(requireContext(), "Î†àÏãúÌîº ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            } else {
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(recipe.url))
                startActivity(intent)
            }
        }
        binding.recyclerViewSearchResults.layoutManager = GridLayoutManager(requireContext(), 2)
        binding.recyclerViewSearchResults.adapter = adapter

        // ‚úÖ MainHomeFragmentÎ°úÎ∂ÄÌÑ∞ keywordÎ•º Î∞õÏïòÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥†, Î∞îÎ°ú Í≤ÄÏÉâ Ïã§Ìñâ
        val keyword = arguments?.getString("keyword") ?: ""
        if (keyword.isNotBlank()) {
            binding.editTextSearch.setText(keyword)           // Í≤ÄÏÉâÏ∞ΩÏóê ÏûêÎèô ÏûÖÎ†•
            searchRecipes(keyword)                            // üîç Í≤ÄÏÉâ Ïã§Ìñâ
        }

        // ‚úÖ Í≤ÄÏÉâÏ∞Ω Ïö∞Ï∏° ÎèãÎ≥¥Í∏∞ ÌÅ¥Î¶≠ Ïãú ÎèôÏûë
        binding.imageSearchIcon.setOnClickListener {
            val keywordText = binding.editTextSearch.text.toString().trim()
            if (keywordText.isNotEmpty()) {
                searchRecipes(keywordText)
                hideKeyboard()
            }
        }

        // ‚úÖ ÌÇ§Î≥¥Îìú 'Í≤ÄÏÉâ' Î≤ÑÌäº ÎàåÎ†ÄÏùÑ Îïå ÎèôÏûë
        binding.editTextSearch.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                val keywordText = binding.editTextSearch.text.toString().trim()
                if (keywordText.isNotEmpty()) {
                    searchRecipes(keywordText)
                    hideKeyboard()
                }
                true
            } else {
                false
            }
        }
    }

    private fun searchRecipes(keyword: String) {
        val token = getToken()
        if (token == null) {
            Toast.makeText(requireContext(), "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()
            return
        }

        val authHeader = "Bearer $token"

        recipeApi.searchRecipes(authHeader, keyword).enqueue(object : Callback<List<Recipe>> {
            override fun onResponse(call: Call<List<Recipe>>, response: Response<List<Recipe>>) {
                if (response.isSuccessful) {
                    val results = response.body() ?: emptyList()
                    recipeList.clear()
                    recipeList.addAll(results)
                    adapter.notifyDataSetChanged()

                    binding.textSearchResultTitle.text = if (results.isEmpty()) "Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå" else "Í≤ÄÏÉâ Í≤∞Í≥º"
                } else {
                    Toast.makeText(requireContext(), "ÏÑúÎ≤Ñ Ïò§Î•ò (${response.code()})", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<List<Recipe>>, t: Throwable) {
                Toast.makeText(requireContext(), "Ïó∞Í≤∞ Ïã§Ìå®: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun getToken(): String? {
        val prefs = requireContext().getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
        return prefs.getString("JWT_TOKEN", null)
    }

    private fun hideKeyboard() {
        val imm = requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(binding.editTextSearch.windowToken, 0)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
